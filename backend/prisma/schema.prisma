generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Show {
  id             BigInt         @id @default(autoincrement())
  title          String
  genre          String?
  description    String?
  producer       String?
  releaseYear    Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  episodes       Episode[]
  ratings        Rating[]
  watchlist      Watchlist[]
  favorites      Favorite[]
  playlistShows  PlaylistShow[]
}

model Episode {
  id             BigInt    @id @default(autoincrement())
  showId         BigInt
  seasonNumber   Int       @default(1)
  episodeNumber  Int
  name           String
  airDate        DateTime?
  createdAt      DateTime  @default(now())
  show           Show      @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([showId, seasonNumber, episodeNumber])
}

model Rating {
  id         BigInt   @id @default(autoincrement())
  userId     String
  showId     BigInt
  score      Int
  review     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  show       Show     @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
}

model Watchlist {
  id         BigInt      @id @default(autoincrement())
  userId     String
  showId     BigInt
  status     WatchStatus @default(planned)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  show       Show        @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
}

model Favorite {
  id         BigInt   @id @default(autoincrement())
  userId     String
  showId     BigInt
  createdAt  DateTime @default(now())
  show       Show     @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
}

model Playlist {
  id         BigInt        @id @default(autoincrement())
  userId     String
  name       String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) @updatedAt
  shows      PlaylistShow[]
}

model PlaylistShow {
  id          BigInt   @id @default(autoincrement())
  playlistId  BigInt
  showId      BigInt
  playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  show        Show     @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([playlistId, showId])
}

enum WatchStatus {
  watching
  completed
  planned
  dropped
  removed
}
